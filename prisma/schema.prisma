// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  refreshToken String @db.VarChar(255)  // Optional field to store refresh tokens
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  isAdmin   Boolean  @default(false)
  orders    Order[]  // Relation to Orders
  reviews   Review[] // Relation to Reviews
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[] // Relation to Products
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime  @default(now())
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  Int?
  orderItems  OrderItem[] // Relation to OrderItems
  reviews     Review[]    // Relation to Reviews
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  items       OrderItem[] // Relation to OrderItems
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  rating    Int      
  comment   String?
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
